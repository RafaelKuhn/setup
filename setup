printf "#########################################################\n";
printf "######################### SETUP #########################\n";
printf "#########################################################\n";

confirm() {
	local ans IFS=;
	printf "$1";
	while read -n 1 ans;
	do case $ans in [Yy]) return 0;;
		[Nn]) return 1;;
		esac;
	done;
};

_main() {
	local DOTFILES_URL="https://gist.github.com/RafaelKuhn/22ebe5ddef4dac4e898d28c4eec7b2dc/raw";
	local GIT_SCRIPTS_URL="https://gist.github.com/RafaelKuhn/d3cfdd2be6312c3db7a273d183f64d2d/raw";
	local FUNCTIONS_URL="https://gist.github.com/RafaelKuhn/2409a903309eeade5549c5f065b24b60/raw";
	
	local SCRIPTS_DIR="$HOME/.shell_scripts";
	local FUNCTIONS_DIR="$HOME/.shell_functions";



	printf "setting up ~/.bash_profile, ~/.bashrc and ~/.shell_aliases\n\n";

	[ -f "$HOME/.bash_profile" ] && {
		if confirm "$HOME/.bash_profile exists, wanna overwrite? (y/n) "; then
			printf " downloading .bash_profile";
			curl -L -s "$DOTFILES_URL/.bash_profile" > "$HOME/.bash_profile";
		fi;
	} || {
		printf "downloading .bash_profile";
		curl -L -s "$DOTFILES_URL/.bash_profile" > "$HOME/.bash_profile";
	};
	printf "\n";

	[ -f "$HOME/.bashrc" ] && {
		if confirm "$HOME/.bashrc exists, wanna overwrite? (y/n) "; then
			printf " downloading .bashrc";
			curl -L -s "$DOTFILES_URL/.bashrc" > "$HOME/.bashrc";
		fi;
	} || {
		printf "downloading .bashrc";
		curl -L -s "$DOTFILES_URL/.bashrc" > "$HOME/.bashrc";
	};
	printf "\n";
	

	[ -f "$HOME/.shell_aliases" ] && {
		if confirm "$HOME/.shell_aliases exists, wanna overwrite? (y/n) "; then
			printf " downloading .shell_aliases";
			curl -L -s "$DOTFILES_URL/.shell_aliases" > "$HOME/.shell_aliases";
		fi;
	} || {
		printf "downloading .shell_aliases";
		curl -L -s "$DOTFILES_URL/.shell_aliases" > "$HOME/.shell_aliases";
	};
	printf "\n";



	printf "\nsetting up ~/.shell_scripts/\n\n";

	[ -d "$SCRIPTS_DIR" ] || {
		printf "creating scripts directory: $SCRIPTS_DIR\n";
		mkdir "$SCRIPTS_DIR";
	};


	[ -f "$SCRIPTS_DIR/clock" ] && {
		if confirm "$SCRIPTS_DIR/clock exists, wanna overwrite? (y/n) "; then
			printf " downloading script clock";
			curl -L -s "$GIT_SCRIPTS_URL/clock" > "$SCRIPTS_DIR/clock";
		fi;
	} || {
		printf "downloading script clock";
		curl -L -s "$GIT_SCRIPTS_URL/clock" > "$SCRIPTS_DIR/clock";
	};
	printf "\n";
	

	[ -f "$SCRIPTS_DIR/luck" ] && {
		if confirm "$SCRIPTS_DIR/luck exists, wanna overwrite? (y/n) "; then
			printf " downloading script luck";
			curl -L -s "$GIT_SCRIPTS_URL/luck" > "$SCRIPTS_DIR/luck";
		fi;
	} || {
		printf "downloading script luck";
		curl -L -s "$GIT_SCRIPTS_URL/luck" > "$SCRIPTS_DIR/luck";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/moon" ] && {
		if confirm "$SCRIPTS_DIR/moon exists, wanna overwrite? (y/n) "; then
			printf " downloading script moon";
			curl -L -s "$GIT_SCRIPTS_URL/moon" > "$SCRIPTS_DIR/moon";
		fi;
	} || {
		printf "downloading script moon";
		curl -L -s "$GIT_SCRIPTS_URL/moon" > "$SCRIPTS_DIR/moon";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/season" ] && {
		if confirm "$SCRIPTS_DIR/season exists, wanna overwrite? (y/n) "; then
			printf " downloading script season";
			curl -L -s "$GIT_SCRIPTS_URL/season" > "$SCRIPTS_DIR/season";
		fi;
	} || {
		printf "downloading script season";
		curl -L -s "$GIT_SCRIPTS_URL/season" > "$SCRIPTS_DIR/season";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/gitig" ] && {
		if confirm "$SCRIPTS_DIR/gitig exists, wanna overwrite? (y/n) "; then
			printf " downloading script gitig";
			curl -L -s "$GIT_SCRIPTS_URL/gitig" > "$SCRIPTS_DIR/gitig";
		fi;
	} || {
		printf "downloading script gitig";
		curl -L -s "$GIT_SCRIPTS_URL/gitig" > "$SCRIPTS_DIR/gitig";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/git-objs" ] && {
		if confirm "$SCRIPTS_DIR/git-objs exists, wanna overwrite? (y/n) "; then
			printf " downloading script git-objs";
			curl -L -s "$GIT_SCRIPTS_URL/git-objs" > "$SCRIPTS_DIR/git-objs";
		fi;
	} || {
		printf "downloading script git-objs";
		curl -L -s "$GIT_SCRIPTS_URL/git-objs" > "$SCRIPTS_DIR/git-objs";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/git-prune-local" ] && {
		if confirm "$SCRIPTS_DIR/git-prune-local exists, wanna overwrite? (y/n) "; then
			printf " downloading script git-prune-local";
			curl -L -s "$GIT_SCRIPTS_URL/git-prune-local" > "$SCRIPTS_DIR/git-prune-local";
		fi;
	} || {
		printf "downloading script git-prune-local";
		curl -L -s "$GIT_SCRIPTS_URL/git-prune-local" > "$SCRIPTS_DIR/git-prune-local";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/capitalize" ] && {
		if confirm "$SCRIPTS_DIR/capitalize exists, wanna overwrite? (y/n) "; then
			printf " downloading script capitalize";
			curl -L -s "$GIT_SCRIPTS_URL/capitalize" > "$SCRIPTS_DIR/capitalize";
		fi;
	} || {
		printf "downloading script capitalize";
		curl -L -s "$GIT_SCRIPTS_URL/capitalize" > "$SCRIPTS_DIR/capitalize";
	};
	printf "\n";


	[ -f "$SCRIPTS_DIR/pwdw" ] && {
		if confirm "$SCRIPTS_DIR/pwdw exists, wanna overwrite? (y/n) "; then
			printf " downloading script pwdw";
			curl -L -s "$GIT_SCRIPTS_URL/pwdw" > "$SCRIPTS_DIR/pwdw";
		fi;
	} || {
		printf "downloading script pwdw";
		curl -L -s "$GIT_SCRIPTS_URL/pwdw" > "$SCRIPTS_DIR/pwdw";
	};
	printf "\n";



	printf "\nsetting up ~/.shell_functions/\n\n";

	[ -d "$FUNCTIONS_DIR" ] || {
		printf "creating functions directory: $FUNCTIONS_DIR\n";
		mkdir "$FUNCTIONS_DIR";
	};


	[ -f "$FUNCTIONS_DIR/remember.sh" ] && {
		if confirm "$FUNCTIONS_DIR/remember.sh exists, wanna overwrite? (y/n) "; then
			printf " downloading script remember.sh";
			curl -L -s "$FUNCTIONS_URL/remember.sh" > "$FUNCTIONS_DIR/remember.sh";
		fi;
	} || {
		printf "downloading script remember.sh";
		curl -L -s "$FUNCTIONS_URL/remember.sh" > "$FUNCTIONS_DIR/remember.sh";
	};
	printf "\n\n";


	printf "granting permissions to functions and scripts\n";

	for script in "$SCRIPTS_DIR"/*; do
		chmod +x "$script";
	done;

	for func in "$FUNCTIONS_DIR"/*; do
		chmod +x "$func";
	done;


	source "$HOME/.bash_profile";
};

_main

# TODO: test this in actual linos distro